{"ast":null,"code":"import { timer } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./path-ai.service\";\nimport * as i2 from \"@angular/common\";\n\nfunction AppComponent_ng_container_3_ng_container_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 13);\n    i0.ɵɵelement(2, \"line\", 14)(3, \"line\", 14)(4, \"line\", 15)(5, \"line\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction AppComponent_ng_container_3_ng_container_2_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 16);\n    i0.ɵɵelement(2, \"path\", 17)(3, \"path\", 18)(4, \"path\", 19)(5, \"path\", 20)(6, \"path\", 21)(7, \"path\", 22)(8, \"path\", 23)(9, \"path\", 24)(10, \"path\", 25)(11, \"path\", 26)(12, \"path\", 27)(13, \"path\", 28)(14, \"path\", 29)(15, \"path\", 30)(16, \"path\", 31)(17, \"path\", 32)(18, \"path\", 33)(19, \"path\", 34)(20, \"path\", 35)(21, \"path\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction AppComponent_ng_container_3_ng_container_2_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 37);\n    i0.ɵɵelement(2, \"path\", 38)(3, \"path\", 39)(4, \"path\", 40)(5, \"path\", 41)(6, \"path\", 42)(7, \"path\", 43)(8, \"path\", 44);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction AppComponent_ng_container_3_ng_container_2_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 45);\n    i0.ɵɵelement(2, \"path\", 46);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nconst _c0 = function (a0, a1, a2) {\n  return {\n    \"found-chunk\": a0,\n    \"var-highlight\": a1,\n    \"bg-danger\": a2\n  };\n};\n\nfunction AppComponent_ng_container_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 10);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_container_3_ng_container_2_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const j_r5 = restoredCtx.index;\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.selectChunk(i_r2, j_r5);\n    });\n    i0.ɵɵelementStart(2, \"span\", 11);\n    i0.ɵɵtemplate(3, AppComponent_ng_container_3_ng_container_2_ng_container_3_Template, 6, 0, \"ng-container\", 12);\n    i0.ɵɵtemplate(4, AppComponent_ng_container_3_ng_container_2_ng_container_4_Template, 22, 0, \"ng-container\", 12);\n    i0.ɵɵtemplate(5, AppComponent_ng_container_3_ng_container_2_ng_container_5_Template, 9, 0, \"ng-container\", 12);\n    i0.ɵɵtemplate(6, AppComponent_ng_container_3_ng_container_2_ng_container_6_Template, 3, 0, \"ng-container\", 12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const c_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(5, _c0, c_r4.checked, c_r4.label === \"M\", c_r4.label === \"P\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !c_r4.checked && !c_r4.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", c_r4.label === \"M\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", c_r4.label === \"P\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", c_r4.checked && c_r4.label !== \"M\" && c_r4.label !== \"P\");\n  }\n}\n\nfunction AppComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 9);\n    i0.ɵɵtemplate(2, AppComponent_ng_container_3_ng_container_2_Template, 7, 9, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const g_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", g_r1);\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(path) {\n      this.path = path;\n      this.title = 'path';\n      this.grid = [];\n      this.updateInterval = timer(1000, 1000);\n      this.selectMode = '';\n      this.lastMarioIndex = [999, 999];\n      this.lastPrincessIndex = [999, 999];\n    }\n\n    ngOnInit() {\n      this.grid = this.path.createGrid(10, 10);\n      this.gridCopy = this.path.getCopy(this.grid);\n    }\n\n    selectMario() {\n      this.selectMode = 'mario';\n    }\n\n    selectPrincess() {\n      this.selectMode = 'princess';\n    }\n\n    selectChunk(i, j) {\n      switch (this.selectMode) {\n        case 'mario':\n          if (this.lastMarioIndex[0] !== 999 && this.lastMarioIndex[1] !== 999) {\n            this.grid[this.lastMarioIndex[0]][this.lastMarioIndex[1]] = {\n              label: '',\n              checked: false\n            };\n          }\n\n          this.grid[i][j] = {\n            label: 'M',\n            checked: false\n          };\n          this.lastMarioIndex = [i, j];\n          break;\n\n        case 'princess':\n          if (this.lastPrincessIndex[0] !== 999 && this.lastPrincessIndex[1] !== 999) {\n            this.grid[this.lastPrincessIndex[0]][this.lastPrincessIndex[1]] = {\n              label: '',\n              checked: false\n            };\n          }\n\n          this.grid[i][j] = {\n            label: 'P',\n            checked: false,\n            person: 'princess'\n          };\n          this.lastPrincessIndex = [i, j];\n          break;\n      }\n    }\n\n    start() {\n      this.path.vI = this.lastMarioIndex;\n      this.path.pI = this.lastPrincessIndex;\n      this.path.grid = this.grid;\n      this.path.max = this.grid.length;\n      this.clearFinder();\n      this.pathFinder = this.path.varioPosition.subscribe(bestCase => {\n        var _a;\n\n        let foundPrincess = false;\n        let surr = this.path.getSurroundings(this.lastMarioIndex[0], this.lastMarioIndex[1]);\n\n        for (let coord of surr) {\n          if (((_a = this.grid[coord[0]][coord[1]]) === null || _a === void 0 ? void 0 : _a.person) == 'princess') {\n            foundPrincess = true;\n            setTimeout(() => {\n              alert('Found the princess.');\n            }, 1000);\n          }\n        }\n\n        if (!foundPrincess) {\n          this.selectMario();\n          setTimeout(() => {\n            this.selectChunk(bestCase.moveTo[0], bestCase.moveTo[1]);\n            this.start();\n          }, 500);\n        }\n      });\n    }\n\n    clearFinder() {\n      if (this.pathFinder) {\n        this.pathFinder.unsubscribe();\n      }\n    }\n\n    clearAll() {\n      this.clearFinder();\n      this.grid = this.path.getCopy(this.gridCopy);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.PathAiService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 13,\n    vars: 1,\n    consts: [[1, \"body\"], [1, \"row\", \"h-100\"], [1, \"col-md-10\", \"scrollable-height\"], [4, \"ngFor\", \"ngForOf\"], [1, \"col-md-2\", \"d-flex\", \"flex-column\"], [1, \"btn\", \"btn-primary\", \"m-2\", 3, \"click\"], [1, \"btn\", \"btn-warning\", \"m-2\", 3, \"click\"], [1, \"btn\", \"btn-danger\", \"m-2\", 3, \"click\"], [1, \"btn\", \"btn-success\", \"m-2\", 3, \"click\"], [1, \"container\"], [1, \"mario-div\", 3, \"ngClass\", \"click\"], [1, \"mario-container\"], [4, \"ngIf\"], [\"width\", \"54\", \"height\", \"44\", \"viewBox\", \"0 0 54 44\", \"fill\", \"none\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"cross\"], [\"x1\", \"2.80885\", \"y1\", \"2.66777\", \"x2\", \"51.6678\", \"y2\", \"41.1912\", \"stroke\", \"#A0DBFE\", \"stroke-width\", \"4\", \"stroke-linecap\", \"round\"], [\"x1\", \"3.22178\", \"y1\", \"41.1803\", \"x2\", \"48.1803\", \"y2\", \"2.77823\", \"stroke\", \"#A0DBFE\", \"stroke-width\", \"4\", \"stroke-linecap\", \"round\"], [\"width\", \"77\", \"height\", \"28\", \"viewBox\", \"0 0 77 28\", \"fill\", \"none\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"var\"], [\"d\", \"M37.5942 17.8806C36.1304 13.9072 34.4069 8.31166 29.73 7.05251C26.9118 6.29376 23.9747 8.02223 22.1622 10.0362C19.9698 12.4722 18.2655 15.2692 16.4715 17.9991C15.4878 19.4961 14.154 21.9558 12.164 22.1288C8.06756 22.4851 2.73043 18.8808 2.38316 14.482C2.3591 14.1772 2.01286 11.5066 2.73882 12.1899C3.83003 13.217 4.90563 12.9427 6.2955 12.5456\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M40.084 18.5919C40.7694 13.3608 43.8332 7.36285 49.9241 7.21058C52.9988 7.13371 55.4912 7.96575 57.9464 9.85832C61.4957 12.5943 66.2394 15.6585 70.6714 13.0396C73.9678 11.0917 76.2766 6.76153 74.0502 3.29823C72.0232 0.145057 72.303 3.63314 73.8724 2.58689\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M5.22852 10.0559C5.26958 12.1225 4.45517 21.0816 8.78519 21.0816\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M5.22849 9.70024C4.00131 13.7908 2.76383 16.6277 6.27574 19.4811C7.55283 20.5187 8.15889 21.2904 9.85217 20.7259\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M6.29553 10.7673C4.46002 14.7176 4.30003 16.5667 7.73797 19.1452C9.17457 20.2227 9.77242 21.0816 11.6305 21.0816\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M5.93983 9.34458C4.77909 13.5007 4.06394 16.7162 7.18466 19.8368C9.31385 21.9659 6.88055 19.9855 6.01886 18.9476C4.25728 16.8257 2.22328 13.7765 3.09448 10.9451C3.25222 10.4324 4.78238 8.01237 3.27231 9.52241C0.433895 12.3608 3.00192 19.3033 7.00681 19.3033\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M5.58417 17.5249C8.52801 19.2245 10.0442 20.3703 13.2113 20.3703C13.9606 20.3703 15.4281 21.2445 16.1752 20.6469C17.6527 19.465 19.6636 18.432 21.1545 17.0902C26.6133 12.1773 33.2251 20.7259 38.6612 20.7259\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M32.9706 13.9683C29.7554 13.4652 25.2029 11.9324 22.8736 15.1933C22.0347 16.3678 25.6098 14.1464 26.7464 13.2569C27.0754 12.9994 30.5986 10.8255 30.0462 10.1349C29.2849 9.18322 26.8674 10.4157 26.1339 10.8463C24.4413 11.8398 22.3573 13.162 21.2533 14.8179C20.3639 16.152 23.1626 14.0122 23.5652 13.7707C25.48 12.6217 27.9961 10.7484 29.2163 8.83085C30.0978 7.44571 25.7212 9.75374 25.5016 9.89785C23.6928 11.0849 20.8565 12.6391 19.8899 14.6796C19.2268 16.0797 23.8648 13.3627 24.158 13.1779C25.5789 12.2821 28.2189 10.9602 28.9792 9.34458C29.1303 9.02353 27.6338 9.14342 28.2679 10.4116C29.0147 11.9052 33.0549 15.6229 34.907 13.7707C36.0429 12.6348 32.3129 8.6356 32.6347 11.854C32.799 13.4972 33.2187 15.5738 34.3933 16.8136C35.6735 18.1649 35.3603 15.6622 34.9465 14.9562C34.2469 13.7628 32.8532 11.0603 31.3503 10.787C28.9006 10.3416 30.7437 14.7037 31.1923 15.5688C31.8566 16.8499 33.3169 20.0146 35.1046 20.0146C36.3836 20.0146 34.1661 16.8069 34.0376 16.616C33.468 15.7697 30.8894 12.8389 30.9156 12.9013C31.7785 14.9507 33.0858 16.4369 34.3933 18.1572C35.4449 19.5409 35.3623 18.2858 34.5316 17.3273C33.2765 15.8792 30.8129 12.9408 28.7223 12.9408C25.9851 12.9408 25.3016 16.1023 22.8341 16.1023C21.3171 16.1023 18.5043 16.2156 20.6013 18.1572C22.4473 19.8665 33.4022 21.2094 34.3933 18.2363\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M23.3676 15.7466C25.5317 17.7968 29.4028 20.5205 32.6149 18.5129C33.7201 17.8222 30.3977 17.2615 30.2833 17.2483C29.0559 17.1072 24.8826 16.0495 23.9406 16.9914C23.2405 17.6916 36.0643 19.6201 28.8804 18.0584C26.4356 17.527 22.5728 17.5135 20.2061 18.4339C17.4651 19.4998 22.7761 20.519 23.3676 20.6469C25.65 21.1404 25.4551 20.5869 23.3281 20.3505C21.682 20.1676 17.9832 18.6413 16.6099 20.0146C15.6343 20.9902 27.5992 23.4393 21.4312 21.9708C20.8477 21.8319 16.4602 20.5402 17.7559 21.4373C19.6335 22.7371 22.8631 23.2108 25.0866 22.8402C27.4354 22.4487 20.3599 22.2171 18.0326 21.7139C15.6943 21.2084 21.9773 22.9002 22.8538 23.0576C24.1025 23.2817 29.1597 24.5345 30.0462 22.86C30.5981 21.8174 27.8997 21.924 27.4775 22.3462C26.5854 23.2383 33.0121 22.2156 33.4646 22.1486C35.9167 21.7853 36.5779 20.143 33.6819 20.805C32.7025 21.0289 30.2092 22.2128 32.6545 22.4845C33.666 22.5969 37.95 21.808 37.95 20.3703C37.95 17.0537 28.8359 24.3729 35.6184 21.9313C36.5455 21.5975 39.4285 19.8419 37.5943 19.0266C35.696 18.1829 33.2187 19.2638 31.5677 20.1924C29.8667 21.1492 32.4645 21.0406 30.1055 20.7457C26.9906 20.3563 23.0414 21.3599 19.969 21.872C16.6871 22.419 19.7617 22.1662 21.3719 22.524C22.5386 22.7833 18.7246 22.1627 18.1906 22.1486C17.3715 22.1271 12.8352 22.1762 15.9183 22.4845C16.6652 22.5592 20.7256 23.3681 18.2302 22.7809C17.4884 22.6064 13.7747 21.4661 14.6735 21.7929C18.0195 23.0097 22.4373 22.477 25.5016 20.7259\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M40.7953 19.6589C42.943 16.8609 49.8298 8.84609 47.3356 11.3403C46.843 11.8329 46.3393 12.2168 45.7746 12.6246C44.1703 13.7833 42.5346 14.6322 41.1509 16.1023C39.1397 18.2391 45.7479 12.3501 47.4739 9.97687C49.183 7.62688 37.485 15.9 40.0839 14.6006C42.0706 13.6072 44.2423 11.4323 46.0512 10.0559C47.4544 8.98831 51.8359 6.16034 50.6749 7.4872C49.9021 8.37047 48.3927 8.99472 47.3554 9.54217C45.8821 10.3197 44.2434 10.5505 46.644 10.1349C49.3505 9.6665 52.1953 9.5419 54.8639 8.90988C57.1357 8.37184 52.779 9.91099 52.2557 10.0559C49.425 10.8398 46.5118 11.3382 43.7196 12.269C41.7683 12.9194 46.2571 13.6112 46.6835 13.6916C47.0387 13.7586 51.646 14.9752 51.0306 15.6676C50.5239 16.2376 45.8621 16.088 45.0633 16.1023C44.166 16.1183 39.8533 15.6396 41.5856 17.2483C43.6911 19.2034 47.0889 19.2152 49.687 20.0146C51.8403 20.6772 51.7054 20.5991 49.6079 20.0146C47.1884 19.3403 44.3284 19.0076 42.0203 18.1572C41.8235 18.0847 45.0821 19.9744 46.1303 20.2912C48.4766 21.0006 55.8924 21.0816 53.4412 21.0816C51.108 21.0816 48.4358 19.7696 46.1303 19.3033C45.5561 19.1871 39.7151 18.2231 40.5186 19.0266C42.7303 21.2383 46.7015 21.6349 49.687 21.6349C50.817 21.6349 56.4673 21.1073 52.4533 20.4493C49.3751 19.9447 46.1458 18.9476 43.0083 18.9476C41.2597 18.9476 46.469 20.5573 46.8416 20.6469C48.3767 21.0159 55.218 22.1984 56.5632 21.0026C56.7639 20.8242 54.8954 20.3816 54.8244 20.3703C53.449 20.1502 52.1427 19.761 50.754 19.5799C50.311 19.5221 46.023 18.7952 47.9877 20.0146C50.7824 21.7492 55.1627 21.1929 58.223 20.805C64.2414 20.042 58.9462 17.8998 56.4446 19.2242C56.1765 19.3662 65.1488 19.3163 64.9807 16.4579C64.9054 15.179 59.1159 16.9642 58.6577 17.8806C58.49 18.2159 61.3182 17.4429 61.6018 17.3273C62.3214 17.0342 63.7829 16.48 64.1903 15.7466C65.7711 12.9012 53.7751 17.8806 55.101 17.8806C59.3677 17.8806 62.7653 12.3636 56.5237 13.6916C55.9954 13.804 50.4998 15.9596 51.1887 16.7346C52.0505 17.7041 56.8835 14.5469 57.5907 13.9683C60.168 11.8595 56.7782 11.8305 55.18 12.1109C52.169 12.6392 48.4277 14.059 46.644 16.7346C46.0471 17.6299 52.5331 15.02 53.0856 14.6796C53.7963 14.2416 58.8284 10.3089 55.4962 10.8463C51.9472 11.4187 48.3249 13.1963 45.7746 15.7466C43.7421 17.7792 50.3747 14.3474 51.0306 13.9683C52.3058 13.231 55.5054 10.3351 52.0976 10.8463C50.1964 11.1315 44.4432 13.0965 44.3519 15.47C44.2548 17.9954 54.9014 10.4202 46.7626 13.8892C45.7674 14.3134 37.4104 17.7245 38.5822 19.0266C40.2769 20.9097 42.9242 22.1486 45.577 22.1486C48.9227 22.1486 52.9659 21.9175 56.168 21.0026C59.4202 20.0733 67.826 16.7269 67.826 12.5456\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M57.8673 20.0146C62.3676 18.4545 67.9487 17.1564 69.6043 12.1899\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M60.0013 19.3033C62.9422 18.3647 67.5394 17.4213 69.1697 14.3239C69.5237 13.6513 69.7685 13.0928 70.3157 12.5456\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M62.1353 17.5249C64.976 16.578 72.094 13.5103 72.094 9.16675C72.094 8.16953 71.8435 7.34077 71.7383 6.49924C71.6315 5.64484 70.3156 5.09547 70.3156 4.1874C70.3156 3.0775 71.4077 2.97387 72.094 3.83174C72.9666 4.92255 73.4806 5.71931 73.9513 7.13154C74.9887 10.2437 73.832 14.1267 70.6713 15.3909\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M72.8053 2.94255C74.0311 8.13179 74.0674 12.3839 69.9797 16.0627C69.4416 16.547 66.0476 19.3979 66.0476 17.5249\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M72.8054 10.0559C70.5461 14.0167 68.6278 17.0596 64.4472 18.9476C62.8798 19.6555 61.1436 20.0647 59.4876 20.5283C58.317 20.8561 55.8467 21.0659 55.3777 19.6589\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M67.1147 16.1023C63.6051 19.9912 57.4548 22.1628 52.1766 20.3703C51.5318 20.1513 46.4982 17.5249 48.9756 17.5249\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M60.0013 17.8806C56.0353 18.6738 51.4049 18.6392 47.5727 19.8368C46.3903 20.2063 47.6881 20.3703 48.2643 20.3703C51.2984 20.3703 55.8877 19.5968 58.5589 18.0387C59.5472 17.4622 53.9875 17.8734 53.3819 17.9004C50.8382 18.0134 43.2284 18.5919 45.7746 18.5919C49.8094 18.5919 44.2963 19.3446 43.1269 19.6787C41.7013 20.086 39.1974 20.2241 41.5263 21.9708C43.9239 23.7689 47.7739 24.2826 50.6749 24.2826C54.6968 24.2826 58.9101 24.6847 62.8071 23.5713C66.0697 22.6391 72.6176 16.9618 71.3827 13.2569\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M59.6456 20.7259C63.1637 20.1341 66.6879 19.5543 68.8929 16.537C69.9293 15.1188 68.2869 15.7832 67.0948 16.3196C66.0777 16.7773 62.1353 18.5418 62.1353 19.8368C62.1353 20.8399 64.6746 20.3703 65.4153 20.3703C66.2316 20.3703 63.0174 21.0144 62.4909 21.1607C61.4635 21.446 60.8056 22.5043 60.515 22.5043C55.2795 22.5043 50.2505 24.1195 45.0632 24.6383\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M40.7953 20.0146C37.7871 22.5385 34.534 26.6514 30.3031 25.3496C27.3601 24.4441 23.564 24.2828 20.5222 24.7173C18.9551 24.9412 17.7856 24.9786 16.2542 24.6383C15.1505 24.393 14.2764 23.4677 13.2311 23.2354C12.7988 23.1393 11.8415 22.3105 12.006 22.7216C12.3871 23.6746 13.2897 23.8269 14.14 24.1245C18.8173 25.7616 24.3484 25.7747 29.2163 24.994C31.7774 24.5832 39.2372 22.317 36.7051 22.8797C34.4831 23.3735 32.4775 24.5343 30.1253 24.994C27.3224 25.5416 20.4363 26.164 24.0789 21.7929\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M45.0632 18.9476L51.1096 21.0816\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"width\", \"82\", \"height\", \"51\", \"viewBox\", \"0 0 82 51\", \"fill\", \"none\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"princess\"], [\"d\", \"M1.76123 49.0977C13.5531 36.578 31.0825 35.8107 47.346 36.8272C53.889 37.2361 61.1392 37.6317 67.0065 40.9174C68.0115 41.4802 69.02 42.0615 69.832 42.8735C70.5573 43.5988 67.9293 41.9983 67.2041 41.273\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M7.4519 43.407C12.2724 39.1942 17.7662 34.5143 17.7662 27.5601C17.7662 25.556 18.3575 22.0948 16.9759 20.3677C16.489 19.759 14.9181 17.1539 16.1657 19.3995C18.5925 23.7674 20.183 29.781 25.2353 31.8479C28.2794 33.0932 30.0452 33.5331 33.06 32.0257C36.9525 30.0794 37.2131 26.7878 39.3829 23.4897C40.5742 21.679 41.596 17.6661 41.596 15.5267C41.596 14.0006 41.2403 18.565 41.2403 20.0911C41.2403 25.499 44.552 28.8677 49.4207 30.7611C56.3154 33.4424 60.9601 25.5536 63.924 20.7234C64.3611 20.011 67.3526 14.886 66.137 17.6212C65.0574 20.0504 64.4393 22.8865 63.8252 25.4656C63.0685 28.6437 64.6117 32.118 66.2161 34.792C67.3281 36.6454 68.6099 38.0552 70.1284 39.5737C71.4319 40.8772 72.2688 42.041 72.8947 39.8504\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M42.3074 3.57228C42.0244 3.60666 34.7306 4.81088 37.0514 6.41762C37.9219 7.02025 38.9855 7.53035 40.0549 7.40558C41.3037 7.25989 45.8253 6.81513 45.0737 4.56024C44.4051 2.55432 41.9058 1.95968 40.0944 2.58431C38.5807 3.10628 37.9609 4.79628 37.3281 6.06195\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M15.2766 9.97429C5.282 15.1294 17.0004 12.513 15.9089 10.33C15.2466 9.00543 12.5136 9.24404 11.3643 9.53958C9.19747 10.0967 10.6707 11.1258 12.4313 10.6856\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M71.1165 41.273C73.0108 42.3968 79.014 45.0687 79.6327 47.8529C79.7874 48.5492 79.0671 48.9829 78.5854 48.7421\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M70.0494 42.34C73.1308 43.4128 76.9314 44.5024 78.8621 47.3984C79.2662 48.0046 79.4857 48.5753 80.0081 49.0977\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"d\", \"M68.9824 3.92795C70.099 6.07172 71.5348 9.75374 74.2384 7.04992C75.0191 6.26919 74.6218 5.03367 74.1396 4.28361C72.6366 1.94546 69.5355 3.01676 69.6937 5.70628C69.8322 8.06004 74.3174 7.85386 74.3174 5.54821C74.3174 3.26129 68.4516 5.17004 70.0494 3.57228\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"], [\"width\", \"31\", \"height\", \"28\", \"viewBox\", \"0 0 31 28\", \"fill\", \"none\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"cross\"], [\"d\", \"M14.3852 13.3549C16.3735 13.9698 19.2471 15.4121 19.7005 12.4657C19.8683 11.3748 19.0951 10.2564 18.4556 9.44254C16.4849 6.9344 13.4463 8.27405 11.362 9.81798C8.55394 11.898 6.2328 15.7479 8.85258 18.9665C11.5819 22.3197 17.8096 21.0214 20.7082 18.6899C23.3995 16.5251 23.3068 12.5732 21.3207 9.97604C18.7263 6.58344 14.3888 6.82255 10.6507 7.84204C6.92627 8.85779 5.43583 13.6407 6.02701 17.0696C6.86979 21.9578 10.7463 24.5112 15.6696 24.183C20.2328 23.8788 26.2652 22.0979 28.6909 17.8995C30.6772 14.4617 27.7612 8.97378 25.0552 6.67625C18.7353 1.31029 6.32273 2.90166 3.08287 11.1814C0.914982 16.7215 4.89294 22.6748 9.93935 24.8746C14.9551 27.0609 22.0778 26.2066 26.0432 22.3256C30.0786 18.3761 28.7878 12.3064 26.2803 7.90132C24.0011 3.89729 17.5308 0.894899 12.9625 1.97353C11.2919 2.36798 8.78572 3.44431 8.6945 5.45116C8.62637 6.95018 10.0315 7.41395 11.1842 6.95287\", \"stroke\", \"black\", \"stroke-width\", \"3\", \"stroke-linecap\", \"round\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵtemplate(3, AppComponent_ng_container_3_Template, 3, 1, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_5_listener() {\n          return ctx.selectMario();\n        });\n        i0.ɵɵtext(6, \"Mario\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_7_listener() {\n          return ctx.selectPrincess();\n        });\n        i0.ɵɵtext(8, \" Princess \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_9_listener() {\n          return ctx.clearAll();\n        });\n        i0.ɵɵtext(10, \"ClearAll\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_11_listener() {\n          return ctx.start();\n        });\n        i0.ɵɵtext(12, \"Start\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.grid);\n      }\n    },\n    directives: [i2.NgForOf, i2.NgClass, i2.NgIf],\n    styles: [\".body[_ngcontent-%COMP%]{background:#ae85ca;overflow:hidden;margin:17px;height:calc(100% - 42px);border-radius:38px 97px 47px 95px;border:solid #333333;padding:25px;border-width:2px 9px 3px 4px}.container[_ngcontent-%COMP%]{cursor:pointer;white-space:nowrap;text-align:center}.mario-div[_ngcontent-%COMP%]{margin:5px;display:inline-block;height:50px;width:60px;background:#7ecaf6c7;border:4px solid black;border-radius:9px}.scrollable-height[_ngcontent-%COMP%]{overflow:scroll;height:100%}.cross[_ngcontent-%COMP%], .var[_ngcontent-%COMP%], .princess[_ngcontent-%COMP%]{height:40px;width:26px}.var[_ngcontent-%COMP%], .princess[_ngcontent-%COMP%]{transform:scale(1.3)}.found-chunk[_ngcontent-%COMP%]{background:orange}.var-highlight[_ngcontent-%COMP%]{background:#2f8384}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}