{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let PathAiService = /*#__PURE__*/(() => {\n  class PathAiService {\n    constructor() {\n      this.vI = [0, 0];\n      this.pI = [0, 0];\n      this.max = 0;\n      this.range = 1;\n      this.range3Array = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n      this.gridObject = {\n        label: '',\n        checked: false\n      };\n      this.grid = [];\n      this.varioPosition = new Observable(subscriber => {\n        let sur = this.getSurroundings(this.vI[0], this.vI[1]);\n        this.checkGrid(sur);\n        this.checkWhereVarioIsStanding(this.vI);\n        let bestCase = this.getBestToMoveTo(sur);\n        subscriber.next(bestCase);\n      });\n    } // varioPosition(vario: Array<any>, princess: Array<any>, grid: any){\n    // }\n\n\n    getSurroundings(x, y) {\n      let cx = x;\n      let cy = y;\n      let surr = []; // this.range3Array = this.getCopy(this.range3Array);\n\n      this.range3Array.sort(() => Math.random() - 0.5);\n\n      for (let range of this.range3Array) {\n        let x = cx + range[0];\n        let y = cy + range[1];\n\n        if (x >= 0 && x < this.max && y >= 0 && y < this.max) {\n          surr.push([x, y]);\n        }\n      }\n\n      return surr;\n    }\n\n    getBestToMoveTo(options) {\n      let coord;\n      let moveTo;\n      let max = 0;\n      options.sort(() => Math.random() - 0.5);\n\n      for (let option of options) {\n        let surr = this.getSurroundings(option[0], option[1]);\n        coord = surr !== null && surr !== void 0 ? surr : coord;\n        moveTo = moveTo !== null && moveTo !== void 0 ? moveTo : [option[0], option[1]];\n        let ch = this.checkedCount(surr);\n\n        if (ch.length > max) {\n          max = ch.length;\n          coord = surr;\n          moveTo = [option[0], option[1]];\n        }\n      }\n\n      return {\n        coord,\n        max,\n        moveTo\n      };\n    }\n\n    checkedCount(coords) {\n      return coords.filter(value => {\n        return !this.grid[value[0]][value[1]].checked;\n      });\n    }\n\n    checkGrid(grid) {\n      for (let a of grid) {\n        this.grid[a[0]][a[1]].checked = true;\n      }\n    }\n\n    checkWhereVarioIsStanding(pos) {\n      this.grid[pos[0]][pos[1]].checked = true;\n    }\n\n    createGrid(row, col) {\n      let t = [];\n\n      for (let i = 0; i < row; i++) {\n        let r = [];\n\n        for (let j = 0; j < row; j++) {\n          r.push(this.getCopy(this.gridObject));\n        }\n\n        t.push(r);\n      }\n\n      return t;\n    }\n\n    getCopy(obj) {\n      return obj ? JSON.parse(JSON.stringify(obj)) : obj;\n    }\n\n  }\n\n  PathAiService.ɵfac = function PathAiService_Factory(t) {\n    return new (t || PathAiService)();\n  };\n\n  PathAiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PathAiService,\n    factory: PathAiService.ɵfac,\n    providedIn: 'root'\n  });\n  return PathAiService;\n})();","map":null,"metadata":{},"sourceType":"module"}